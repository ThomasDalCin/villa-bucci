<!--main navbar -->
<div
    class="navigation fixed left-0 top-0 right-0 z-100 w-full h-auto px-4 py-3.5 transform transition-all duration-300 ease-in">
    <div class="w-full h-auto flex flex-row justify-between">
        <!--container logo-->
        <div class="w-auto h-auto">
            {% render 'oniwines-logo' %}
        </div>
        <!--container menu box -->
        <div class="menu-box">
            {% render 'menu-burger' %}
        </div>
    </div>
</div>


<!--container full screen navigation-->
<div
    class="navigation-container fixed inset-1.5 z-60 bg-(--blue-color) rounded-[8px] flex flex-col items-start justify-center hidden">
    <div class="w-full h-full flex flex-col items-start justify-between pt-16">

        <div
            class="w-full flex flex-col items-start justify-center lg:flex-row lg:h-full lg:border lg:border-t-(--border-color)">
            <div
                class="w-full flex flex-col items-start justify-between lg:h-full lg:border lg:border-r-(--border-color)">
                <!--assign variable for each reference link into links menu-->
                {% assign menuLinks = "Home,Il progetto,Contatti" | split: "," %}
                {% for menuLink in menuLinks %}
                {% for linkItem in linklists.main-menu.links %}
                {% if linkItem.title == menuLink %}
                <div
                    class="w-full flex flex-col items-start justify-center p-2.5 border border-b-(--border-color) first:border-t first:border-t-(--border-color) lg:flex-1 lg:border-0 lg:border-t-0 lg:first:border-0 lg:even:border lg:even:border-t-(--border-color) lg:even:border-b-(--border-color) group">
                    <div class="w-full h-auto flex flex-row items-center justify-start lg:gap-x-5">

                        <!--icon link-->
                        <div class="container-arrow-link w-auto h-auto hidden">
                            {% render 'arrow-up' %}
                        </div>

                        <!--container link-->
                        <div class="w-auto h-auto">
                            <li class="list-none">
                                <a class="main-menu-link text-(--link-color) text-[24px] leading-normal lg:text-[96px] lg:group-hover:text-(--orange-color) transition-all duration-200 ease-in"
                                    href="{{ linkItem.url }}">{{
                                    linkItem.title |
                                    upcase }}</a>
                            </li>
                        </div>
                    </div>
                </div>
                {% endif %}
                {% endfor %}
                {% endfor %}
            </div>

            <div class="w-full flex flex-col items-start justify-between lg:h-full">

                <!--assign variable for each reference link into links menu-->
                {% assign menuLinks = "Le cantine,Prodotti" | split: "," %}
                {% for menuLink in menuLinks %}
                {% for linkItem in linklists.main-menu.links %}
                {% if linkItem.title == menuLink %}
                <div
                    class="w-full  flex flex-col items-start justify-center p-2.5 border border-b-(--border-color) transition-all duration-200 ease-linear lg:flex-1 lg:border-0 lg:first:border lg:first:border-b-(--border-color)">
                    <div class="w-full h-auto flex flex-row items-center justify-between"
                        data-target="link-item-{{ forloop.index }}">
                        <!--container link-->
                        <div class="w-auto h-auto">
                            <li class="list-none">
                                <a class="text-link text-(--link-color) text-[24px]  leading-normal transition-all duration-200 ease-linear lg:text-[96px] lg:opacity-[0.3]"
                                    href="javascrip:void(0)">{{ linkItem.title |
                                    upcase }}</a>
                            </li>
                        </div>
                        <!--container arrow right-->
                        <div class="w-auto h-auto container-arrow transition-all duration-200 ease-in-out lg:hidden">
                            {% render 'arrow-right' %}
                        </div>
                    </div>
                    {% if linkItem.links.size > 0 %}
                    <div class="container-childlinks overflow-hidden w-full flex flex-col items-start justify-start gap-y-1.5 h-0 transition-all duration-200 ease-linear lg:h-auto lg:overflow-auto lg:mt-20"
                        data-child-link="link-item-{{ forloop.index }}">

                        <div class="container-arrow-link w-auto h-auto hidden">
                            {% render 'arrow-up' %}
                        </div>

                        {% for childlinks in linkItem.links %}
                        <!--content childlinks-->
                        <div class="w-full h-auto flex flex-row items-center justify-start lg:gap-x-1">

                            <div class="container-arrow-link w-auto h-auto hidden">
                                {% render 'arrow-up' %}
                            </div>

                            <li class="list-none">
                                <a class="main-menu-sublink text-(--link-color) text-[24px] leading-normal lg:hover:text-(--orange-color) transition-all duration-200 ease-linear"
                                    href="{{ childlinks.url }}">{{
                                    childlinks.title |
                                    upcase }}</a>
                            </li>
                        </div>
                        {% endfor %}
                    </div>
                    {% endif %}
                </div>
                {% endif %}
                {% endfor %}
                {% endfor %}
            </div>
        </div>


        <div
            class="w-full flex flex-col items-start justify-between lg:flex-row-reverse lg:relative lg:border lg:border-t-(--border-color) lg:border-l-0 lg:border-r-0 lg:border-b-0">

            <!--container switch language form-->
            <div class="w-full px-2.5 py-5 flex items-center justify-center border border-(--border-color) lg:border-0">
                {% form 'localization', id: "localization_form_tag" %}
                <div
                    class="w-auto h-auto flex flex-row items-center justify-start gap-x-5 lg:absolute lg:top-1/2 lg:left-1/2 lg:-translate-x-1/2 lg:-translate-y-1/2">
                    {% for locale in shop.published_locales %}
                    <button class="language-button w-auto h-auto text-[#E3DBD2] text-[12px]" type="button" tabindex="0"
                        data-locale-code="{{ locale.iso_code }}">
                        {% case locale.endonym_name %}
                        {% when "Italiano" %} IT
                        {% when "English" %} EN
                        {% else %}
                        {% endcase %}
                    </button>
                    {% endfor %}
                </div>
                <input type="hidden" name="locale_code" value="{{ request.locale.iso_code }}" id="localeCode">
                {% endform %}
            </div>

            <!--container navigation contact info -->
            <div class="w-full px-2.5 py-5 flex flex-row items-center justify-between">
                <div class="w-auto h-auto">
                    <a class="flex flex-row items-start justify-start gap-x-1 font-(family-name:--submain-mobile-title-font-family) font-bold text-(--orange-color) text-[12px] leading-normal"
                        href="{{ section.settings.link_to_oniverse }}">{{ section.settings.link_to_oniverse_text |
                        default: "ONIVERSE" | upcase }}<span class="text-(--orange-color)">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-1.5 h-1.5" viewBox="0 0 19 20" fill="none"
                                stroke="currentColor">
                                <path d="M0 1H18V19" stroke="currentColor" />
                                <line x1="17.8635" y1="1.34331" x2="0.863507" y2="19.3433" stroke="currentColor" />
                            </svg>
                        </span></a>
                </div>
                <div class="w-auto h-auto lg:absolute lg:right-5">
                    <a class="text-(--link-color) text-[12px] font-(family-name:--submain-mobile-title-font-family) font-bold"
                        href="mailto:{{ section.settings.mail_to_email |  default: " mail@oniwines.it" }}">{{
                        section.settings.main_to | default: "mail@oniwines.it" | upcase }}</a>
                </div>
            </div>

        </div>
    </div>
</div>

{% style %}
.main-blur{
filter: blur(40px);
}
{% endstyle %}

<!--javascript code here-->
<script>
    document.addEventListener('DOMContentLoaded', () => {

        //handle submission form language site
        const languageButtons = document.querySelectorAll('.language-button');
        const localizationForm = document.getElementById('localization_form_tag');
        const localeCodeHidden = document.getElementById('localeCode');
        let localeCodeActive = null;

        function showLocaleActive() {
            languageButtons.forEach((button) => {
                if (button.getAttribute('data-locale-code') != localeCodeHidden.value) {
                    button.classList.remove('text-[#E3DBD2]');
                    button.classList.add('text-(--link-disable-color)');
                }
            })
        }

        showLocaleActive();

        async function setLocaleCode(localeCode) {
            if (localeCodeHidden) {
                localeCodeHidden.value = localeCode;
            }
        }

        languageButtons.forEach((button) => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();
                localeCodeActive = button.getAttribute('data-locale-code');

                try {
                    await setLocaleCode(localeCodeActive);
                    localizationForm.submit();
                } catch (error) {
                    console.error(error);
                }
            });
        });


        //handle toggle menu
        const menuButton = document.querySelector('.menu-box');
        const navigationContainer = document.querySelector('.navigation-container');
        const mainContent = document.querySelector('main');

        menuButton.addEventListener('click', () => {
            menuButton.classList.toggle('bg-(--beige-menu)');
            navigationContainer.classList.toggle('hidden');
            document.body.classList.toggle('no-scroll');
            mainContent.classList.toggle('main-blur');
        });


        const targetLinks = document.querySelectorAll('[data-target]');
        const containersLinks = document.querySelectorAll('[data-child-link]');
        let isActive = null;

        function checkWindowSize() {
            const windowSize = window.innerWidth;

            if (windowSize <= 1024) {
                handleClickOnLinks()
            }
        }


        window.addEventListener('resize', checkWindowSize)

        const handleClickOnLinks = () => {
            targetLinks.forEach((target, index) => {
                target.addEventListener('click', () => {

                    if (isActive !== null) {
                        const previousTarget = targetLinks[isActive];
                        const previouslinkText = previousTarget.querySelector('.text-link');
                        const previousArrow = previousTarget.querySelector('.container-arrow');
                        const previousContainerLink = containersLinks[isActive];
                        const previousParenteElLink = previousContainerLink.parentElement;
                        const previousMainParent = previousParenteElLink.parentElement;

                        previousArrow.classList.remove('rotate-[90deg]');
                        previouslinkText.classList.remove('opacity-[0.3]')
                        previousContainerLink.style.height = '0px';
                        previousParenteElLink.classList.remove('flex-auto');
                        previousMainParent.classList.remove('flex-auto');
                    }

                    if (isActive !== index) {
                        const linkText = target.querySelector('.text-link');
                        const arrow = target.querySelector('.container-arrow');
                        const containerLink = containersLinks[index];
                        const parenteElLink = containerLink.parentElement;
                        const mainParent = parenteElLink.parentElement;

                        arrow.classList.add('rotate-[90deg]');
                        linkText.classList.add('opacity-[0.3]');
                        containerLink.style.height = `${containerLink.scrollHeight * 2}px`;
                        containerLink.classList.add('max-h-[200px]');
                        parenteElLink.classList.add('flex-auto');
                        mainParent.classList.add('flex-auto');
                    }

                    isActive = (isActive === index) ? null : index;
                });
            });
        }

        checkWindowSize();

        // Display menu item active on page load;
        const path = window.location.pathname;
        const pathSegments = path.split("/").filter((segment) => segment !== "");

        const mainLinks = document.querySelectorAll('.main-menu-link');
        const mainSubLinks = document.querySelectorAll('.main-menu-sublink');
        const allLinks = [...mainLinks, ...mainSubLinks];

        const setActiveLink = (link) => {
            const containerArrow = link.closest('.w-full')?.querySelector('.container-arrow-link');
            if (containerArrow) {
                containerArrow.classList.remove('hidden');
                containerArrow.classList.add('text-(--orange-color)');
                containerArrow.classList.add('mr-[20px]')
            }
            link.classList.add('text-(--orange-color)');
        };

        if (pathSegments.length === 0 || (pathSegments.length === 1 && (pathSegments[0] === "it" || pathSegments[0] === "en"))) {
            allLinks.forEach((link) => {
                if (link.innerHTML.toLowerCase() === "home") {
                    setActiveLink(link);
                }
            });
        }

        pathSegments.forEach((segment) => {
            let newSegment = segment.replace(/-/g, " ").replace(/cantina/g, "").trim().toLowerCase();

            allLinks.forEach((link) => {
                const linkValue = link.innerHTML.toLowerCase();

                if (linkValue.includes(newSegment)) {
                    setActiveLink(link);
                }
            });
        });

    })
</script>